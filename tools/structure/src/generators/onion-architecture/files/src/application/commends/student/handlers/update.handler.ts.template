import { ICommandHandler } from '@restaurant/core';
import { inject, injectable } from 'inversify';

import { Student } from '../../../../domain/interfaces';
import { IStudentRepository } from '../../../../domain/repositories';
import { TYPES } from '../../../../types';
import { UpdateStudentCommand } from '../definitions/update';

@injectable()
export class UpdateStudentCommandHandler implements ICommandHandler<UpdateStudentCommand, Student | undefined> {
  commandToHandle = UpdateStudentCommand.name;

  constructor(
    @inject(TYPES.StudentRepository)
    private readonly repository: IStudentRepository,
  ) {}

  async handle(command: UpdateStudentCommand) {
    const { input, guid } = command;

    const resp = await this.repository.update(guid, input);
    return resp;
  }
}
