import { createEventDescriptor, TYPES as G_TYPES, ICommandHandler, IEventBus } from '@restaurant/core';
import { inject, injectable } from 'inversify';

import { StudentCreated } from '../../../../domain/events/student';
import { Student } from '../../../../domain/interfaces';
import { IStudentRepository } from '../../../../domain/repositories';
import { TYPES } from '../../../../types';
import { CreateStudentCommand } from '../definitions/create';

@injectable()
export class CreateStudentCommandHandler implements ICommandHandler<CreateStudentCommand, Student | undefined> {
  commandToHandle = CreateStudentCommand.name;

  constructor(
    @inject(TYPES.StudentRepository)
    private readonly repository: IStudentRepository,
    @inject(G_TYPES.EventBus) private readonly _eventBus: IEventBus,
  ) {}

  async handle(command: CreateStudentCommand) {
    const { input, guid } = command;

    const resp = await this.repository.create({
      id: guid,
      studentId: input.studentId,
      personnelId: input.personnelId,
      title: input.title,
      firstname: input.firstname,
      lastname: input.lastname,
      firstnameEn: input.firstnameEn,
      lastnameEn: input.lastnameEn,
      course: input.course,
      degree: input.degree,
      graduationDate: input.graduationDate,
    });

    const event = new StudentCreated(guid, resp);
    this._eventBus.publish(event.aggregateName, createEventDescriptor(event));

    return resp;
  }
}
